// <auto-generated />
using System;
using LootCouncil.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LootCouncil.Domain.Data.Migrations
{
    [DbContext(typeof(LootCouncilDbContext))]
    partial class LootCouncilDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LootCouncil.Domain.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Class")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<int?>("GuildUserId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Race")
                        .HasColumnType("text");

                    b.Property<string>("Spec")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("GuildUserId");

                    b.HasIndex("IsDeleted");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.CharacterItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("ItemId");

                    b.ToTable("CharacterItems");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.CharacterItemFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemFilterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterItemId");

                    b.HasIndex("ItemFilterId");

                    b.ToTable("CharacterItemFilters");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.ConflictOfInterestConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowCommenting")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowObjecting")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowSelfVoting")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowVoting")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ConflictOfInterestConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowCommenting = true,
                            AllowObjecting = false,
                            AllowSelfVoting = false,
                            AllowVoting = false
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.DiscordIdentity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("DiscordIdentity");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.DiscordServerIdentity", b =>
                {
                    b.Property<decimal>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DiscordServers");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.DiscordServerMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("MemberId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("ServerId");

                    b.ToTable("DiscordServerMembers");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.ExpirationConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("LockCommentsTteMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("LockObjectionsTteMinutes")
                        .HasColumnType("integer");

                    b.Property<int>("LockVotesTteMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ExpirationConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExpirationTime = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            LockCommentsTteMinutes = 0,
                            LockObjectionsTteMinutes = 0,
                            LockVotesTteMinutes = 0
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Guild", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ConfigurationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ConfigurationId")
                        .IsUnique();

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OwnerId")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("GuildConfiguration");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("GuildRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Basic"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildRoleVoterConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuildRoleId")
                        .HasColumnType("integer");

                    b.Property<int>("VoterSelectionConfigurationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildRoleId");

                    b.HasIndex("VoterSelectionConfigurationId");

                    b.ToTable("GuildRoleVoterConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GuildRoleId = 1,
                            VoterSelectionConfigurationId = 1
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildServerAssociation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<decimal>("ServerId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.HasIndex("ServerId")
                        .IsUnique();

                    b.ToTable("GuildServerAssociation");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("GuildUsers");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildUserVoterConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Eligible")
                        .HasColumnType("boolean");

                    b.Property<bool>("Fixed")
                        .HasColumnType("boolean");

                    b.Property<int>("GuildUserId")
                        .HasColumnType("integer");

                    b.Property<int>("VoterSelectionConfigurationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildUserId");

                    b.HasIndex("VoterSelectionConfigurationId");

                    b.ToTable("GuildUserVoterConfigurations");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Import", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("Faulted")
                        .HasColumnType("boolean");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<double>("Progress")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Class")
                        .HasColumnType("integer");

                    b.Property<string>("Domain")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<int>("InventorySlot")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Quality")
                        .HasColumnType("text");

                    b.Property<int>("QualityValue")
                        .HasColumnType("integer");

                    b.Property<int?>("Subclass")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.ItemFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemFilters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Offspec"
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.ItemSelectionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("SelectAll")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("ItemSelectionConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            SelectAll = true
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.LootCouncilUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<int?>("ActiveGuildId")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveGuildId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("PreVoteConfigurationId");

                    b.ToTable("PreVotes");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteCharacter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("PreVoteItemId");

                    b.ToTable("PreVoteCharacters");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteCharacterConsideration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteCharacterId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PreVoteCharacterId");

                    b.ToTable("PreVoteCharacterConsiderations");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConflictOfInterestConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("ExpirationConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("ItemSelectionConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("TransparencyConfigurationId")
                        .HasColumnType("integer");

                    b.Property<int>("VoterSelectionConfigurationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConflictOfInterestConfigurationId");

                    b.HasIndex("ExpirationConfigurationId");

                    b.HasIndex("ItemSelectionConfigurationId");

                    b.HasIndex("TransparencyConfigurationId");

                    b.HasIndex("VoterSelectionConfigurationId");

                    b.ToTable("PreVoteConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConflictOfInterestConfigurationId = 1,
                            ExpirationConfigurationId = 1,
                            ItemSelectionConfigurationId = 1,
                            TransparencyConfigurationId = 1,
                            VoterSelectionConfigurationId = 1
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PreVoteId");

                    b.ToTable("PreVoteItems");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PreVoteItemId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteVoterId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreVoteItemId");

                    b.HasIndex("PreVoteVoterId");

                    b.ToTable("PreVoteItemAssignments");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreVoteItemId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteVoterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PreVoteItemId");

                    b.HasIndex("PreVoteVoterId");

                    b.ToTable("PreVoteItemComments");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemObjection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreVoteItemId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteVoterId")
                        .HasColumnType("integer");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PreVoteItemId");

                    b.HasIndex("PreVoteVoterId");

                    b.ToTable("PreVoteItemObjections");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemObjectionResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PreVoteItemObjectionId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteVoterId")
                        .HasColumnType("integer");

                    b.Property<string>("Response")
                        .HasColumnType("text");

                    b.Property<bool>("ResponseRequired")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PreVoteItemObjectionId");

                    b.HasIndex("PreVoteVoterId");

                    b.ToTable("PreVoteItemObjectionResponses");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemVote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteCharacterId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteItemId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteVoterId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PreVoteCharacterId");

                    b.HasIndex("PreVoteItemId");

                    b.HasIndex("PreVoteVoterId");

                    b.ToTable("PreVoteItemVotes");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteVoter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GuildUserId")
                        .HasColumnType("integer");

                    b.Property<int>("PreVoteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GuildUserId");

                    b.HasIndex("PreVoteId");

                    b.ToTable("PreVoteVoters");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.TransparencyConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("VoteVisibilityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("VoteVisibilityId");

                    b.ToTable("TransparencyConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            VoteVisibilityId = 1
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.VoterSelectionConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MaximumVotersPerItem")
                        .HasColumnType("integer");

                    b.Property<int>("MinimumVotersPerItem")
                        .HasColumnType("integer");

                    b.Property<bool>("Randomize")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("VoterSelectionConfigurations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MaximumVotersPerItem = 5,
                            MinimumVotersPerItem = 3,
                            Randomize = false
                        });
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.VoteVisibility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowAllEligibleVoters")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowGuild")
                        .HasColumnType("boolean");

                    b.Property<int>("VoteSubmissionRequirement")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("VoteVisibilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AllowAllEligibleVoters = true,
                            AllowGuild = false,
                            VoteSubmissionRequirement = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Character", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Guild", "Guild")
                        .WithMany("Characters")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.GuildUser", "GuildUser")
                        .WithMany("Characters")
                        .HasForeignKey("GuildUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Guild");

                    b.Navigation("GuildUser");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.CharacterItem", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Character", "Character")
                        .WithMany("CharacterItems")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.CharacterItemFilter", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.CharacterItem", "CharacterItem")
                        .WithMany("CharacterItemFilters")
                        .HasForeignKey("CharacterItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.ItemFilter", "ItemFilter")
                        .WithMany()
                        .HasForeignKey("ItemFilterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CharacterItem");

                    b.Navigation("ItemFilter");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.DiscordIdentity", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", "User")
                        .WithOne("DiscordIdentity")
                        .HasForeignKey("LootCouncil.Domain.Entities.DiscordIdentity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.DiscordServerMember", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.DiscordIdentity", "Member")
                        .WithMany("ServerMemberships")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.DiscordServerIdentity", "Server")
                        .WithMany("Members")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Member");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Guild", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.GuildConfiguration", "Configuration")
                        .WithOne("Guild")
                        .HasForeignKey("LootCouncil.Domain.Entities.Guild", "ConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Configuration");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildConfiguration", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildRoleVoterConfiguration", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.GuildRole", "GuildRole")
                        .WithMany()
                        .HasForeignKey("GuildRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.VoterSelectionConfiguration", "VoterSelectionConfiguration")
                        .WithMany("EligibleRoleConfigurations")
                        .HasForeignKey("VoterSelectionConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GuildRole");

                    b.Navigation("VoterSelectionConfiguration");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildServerAssociation", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Guild", "Guild")
                        .WithOne("ServerAssociation")
                        .HasForeignKey("LootCouncil.Domain.Entities.GuildServerAssociation", "GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.DiscordServerIdentity", "Server")
                        .WithOne("GuildAssociation")
                        .HasForeignKey("LootCouncil.Domain.Entities.GuildServerAssociation", "ServerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildUser", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Guild", "Guild")
                        .WithMany("GuildUsers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.GuildRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", "User")
                        .WithMany("GuildUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Guild");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildUserVoterConfiguration", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.GuildUser", "GuildUser")
                        .WithMany()
                        .HasForeignKey("GuildUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.VoterSelectionConfiguration", "VoterSelectionConfiguration")
                        .WithMany("VoterConfigurations")
                        .HasForeignKey("VoterSelectionConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GuildUser");

                    b.Navigation("VoterSelectionConfiguration");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Import", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Guild", "Guild")
                        .WithMany("Imports")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.LootCouncilUser", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Guild", "ActiveGuild")
                        .WithMany()
                        .HasForeignKey("ActiveGuildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ActiveGuild");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVote", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteConfiguration", "PreVoteConfiguration")
                        .WithMany()
                        .HasForeignKey("PreVoteConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("PreVoteConfiguration");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteCharacter", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteItem", "PreVoteItem")
                        .WithMany("EligibleCharacters")
                        .HasForeignKey("PreVoteItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Character");

                    b.Navigation("PreVoteItem");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteCharacterConsideration", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.PreVoteCharacter", "PreVoteCharacter")
                        .WithMany("CharacterConsiderations")
                        .HasForeignKey("PreVoteCharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreVoteCharacter");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteConfiguration", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.ConflictOfInterestConfiguration", "ConflictOfInterestConfiguration")
                        .WithMany()
                        .HasForeignKey("ConflictOfInterestConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.ExpirationConfiguration", "ExpirationConfiguration")
                        .WithMany()
                        .HasForeignKey("ExpirationConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.ItemSelectionConfiguration", "ItemSelectionConfiguration")
                        .WithMany()
                        .HasForeignKey("ItemSelectionConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.TransparencyConfiguration", "TransparencyConfiguration")
                        .WithMany()
                        .HasForeignKey("TransparencyConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.VoterSelectionConfiguration", "VoterSelectionConfiguration")
                        .WithMany()
                        .HasForeignKey("VoterSelectionConfigurationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ConflictOfInterestConfiguration");

                    b.Navigation("ExpirationConfiguration");

                    b.Navigation("ItemSelectionConfiguration");

                    b.Navigation("TransparencyConfiguration");

                    b.Navigation("VoterSelectionConfiguration");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItem", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVote", "PreVote")
                        .WithMany("Items")
                        .HasForeignKey("PreVoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PreVote");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemAssignment", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.PreVoteItem", "PreVoteItem")
                        .WithMany("VoterAssignments")
                        .HasForeignKey("PreVoteItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteVoter", "PreVoteVoter")
                        .WithMany("ItemAssignments")
                        .HasForeignKey("PreVoteVoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreVoteItem");

                    b.Navigation("PreVoteVoter");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemComment", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.PreVoteItem", "PreVoteItem")
                        .WithMany("Comments")
                        .HasForeignKey("PreVoteItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteVoter", "PreVoteVoter")
                        .WithMany("Comments")
                        .HasForeignKey("PreVoteVoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreVoteItem");

                    b.Navigation("PreVoteVoter");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemObjection", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.PreVoteItem", "PreVoteItem")
                        .WithMany("Objections")
                        .HasForeignKey("PreVoteItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteVoter", "PreVoteVoter")
                        .WithMany("Objections")
                        .HasForeignKey("PreVoteVoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreVoteItem");

                    b.Navigation("PreVoteVoter");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemObjectionResponse", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.PreVoteItemObjection", "PreVoteItemObjection")
                        .WithMany("Responses")
                        .HasForeignKey("PreVoteItemObjectionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteVoter", "PreVoteVoter")
                        .WithMany()
                        .HasForeignKey("PreVoteVoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreVoteItemObjection");

                    b.Navigation("PreVoteVoter");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemVote", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.PreVoteCharacter", "PreVoteCharacter")
                        .WithMany()
                        .HasForeignKey("PreVoteCharacterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteItem", "PreVoteItem")
                        .WithMany("Votes")
                        .HasForeignKey("PreVoteItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVoteVoter", "PreVoteVoter")
                        .WithMany("Votes")
                        .HasForeignKey("PreVoteVoterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PreVoteCharacter");

                    b.Navigation("PreVoteItem");

                    b.Navigation("PreVoteVoter");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteVoter", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.GuildUser", "GuildUser")
                        .WithMany()
                        .HasForeignKey("GuildUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.PreVote", "PreVote")
                        .WithMany("Voters")
                        .HasForeignKey("PreVoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GuildUser");

                    b.Navigation("PreVote");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.TransparencyConfiguration", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.VoteVisibility", "VoteVisibility")
                        .WithMany()
                        .HasForeignKey("VoteVisibilityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("VoteVisibility");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LootCouncil.Domain.Entities.LootCouncilUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Character", b =>
                {
                    b.Navigation("CharacterItems");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.CharacterItem", b =>
                {
                    b.Navigation("CharacterItemFilters");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.DiscordIdentity", b =>
                {
                    b.Navigation("ServerMemberships");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.DiscordServerIdentity", b =>
                {
                    b.Navigation("GuildAssociation");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.Guild", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("GuildUsers");

                    b.Navigation("Imports");

                    b.Navigation("ServerAssociation");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildConfiguration", b =>
                {
                    b.Navigation("Guild");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.GuildUser", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.LootCouncilUser", b =>
                {
                    b.Navigation("DiscordIdentity");

                    b.Navigation("GuildUsers");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVote", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Voters");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteCharacter", b =>
                {
                    b.Navigation("CharacterConsiderations");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItem", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("EligibleCharacters");

                    b.Navigation("Objections");

                    b.Navigation("VoterAssignments");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteItemObjection", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.PreVoteVoter", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("ItemAssignments");

                    b.Navigation("Objections");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("LootCouncil.Domain.Entities.VoterSelectionConfiguration", b =>
                {
                    b.Navigation("EligibleRoleConfigurations");

                    b.Navigation("VoterConfigurations");
                });
#pragma warning restore 612, 618
        }
    }
}
